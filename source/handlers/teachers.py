# - *- coding: utf- 8 - *-
# –ò–º–ø–æ—Ä—Ç—ã –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
from data.models import Subject, Teacher
from keyboards.user_keyboard import (
    teachers_kb,
    customizable_kb
)
from loader import bot, dp
from states.user_states import TeacherAddState

from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.exceptions import MessageNotModified

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∏—Ç–µ–ª–µ–π
@dp.message_handler(text="üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—è", state="*")
async def teachers_handler(message: Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>–°–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π:</b>",
                        reply_markup=await teachers_kb(await Teacher.all()))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—è–º–∏
@dp.callback_query_handler(text_startswith="teachers:", state="*")
async def teachers_call_handler(callback: CallbackQuery, state: FSMContext):
    await state.finish()
    callback_handler_type, page, operation = callback.data.split(":")
    if operation == "view":
        try:
            return await bot.edit_message_reply_markup(
                callback.from_user.id,
                callback.message.message_id,
                reply_markup=await teachers_kb(await Teacher.all(), page=int(page))
            )
        except MessageNotModified:
            return await callback.answer("–ú—ã –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—á–∫–µ)")
    elif operation == "add":
        new_text = "<b>–û—Ç–ø—Ä–∞–≤—å –∏–º—è —É—á–∏—Ç–µ–ª—è</b>"
        await TeacherAddState.teacher_name.set()
    elif operation.isdigit():
        teacher = await Teacher.get(teacher_id=operation)
        subjects = await Subject.filter(teachers=teacher)
        subjects = [subject.name for subject in subjects]
        new_text = f"üë®‚Äçüè´ <b>{teacher.name}</b>\nüìö <b>–í–µ–¥—ë—Ç –ø—Ä–µ–¥–º–µ—Ç—ã:</b> " \
                   f"<code>{(', '.join(subjects) if subjects else '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')}</code>"
    await callback.message.edit_text(
        new_text,
        reply_markup=await customizable_kb({"üëàüèª –ù–∞–∑–∞–¥": f"teachers:{page}:view"}, "callback")
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É—á–∏—Ç–µ–ª—è
@dp.message_handler(state=TeacherAddState.teacher_name)
async def teachers_add_handler(message: Message, state: FSMContext):
    await state.finish()
    teacher_name = message.text
    await Teacher.create(name=teacher_name)
    await message.answer("<b>–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª!</b>")
    await teachers_handler(message, state)
