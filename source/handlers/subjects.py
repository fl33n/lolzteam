# - *- coding: utf- 8 - *-
# –ò–º–ø–æ—Ä—Ç—ã –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
from data.models import Subject, Teacher
from keyboards.user_keyboard import (
    subjects_kb,
    customizable_kb
)
from loader import bot, dp
from states.user_states import SubjectAddState

from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.utils.exceptions import MessageNotModified

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
@dp.message_handler(text="üìö –ü—Ä–µ–¥–º–µ—Ç—ã", state="*")
async def subjects_handler(message: Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤:</b>",
                        reply_markup=await subjects_kb(await Subject.all()))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
@dp.callback_query_handler(text_startswith="subjects:", state="*")
async def subjects_call_handler(callback: CallbackQuery, state: FSMContext):
    await state.finish()
    callback_handler_type, page, operation = callback.data.split(":")
    if operation == "view":
        try:
            return await bot.edit_message_reply_markup(
                callback.from_user.id,
                callback.message.message_id,
                reply_markup=await subjects_kb(await Subject.all(), page=int(page))
            )
        except MessageNotModified:
            return await callback.answer("–ú—ã –Ω–∞ —Ç–æ–π –∂–µ —Å—Ç—Ä–∞–Ω–∏—á–∫–µ)")
    elif operation == "add":
        new_text = "<b>–û—Ç–ø—Ä–∞–≤—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞</b>"
        await SubjectAddState.subject_name.set()
    elif operation.isdigit():
        subject = await Subject.get(subject_id=operation).prefetch_related("teachers")
        teachers = [teacher.name for teacher in subject.teachers]
        new_text = f"üìö <b>{subject.name}</b>\n" \
                   "üë®‚Äçüè´ <b>–£—á–∏—Ç–µ–ª—è, –≤–µ–¥—É—â–∏–µ –ø—Ä–µ–¥–º–µ—Ç:</b> " \
                   f"<code>{(', '.join(teachers) if teachers else '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç')}</code>"
    await callback.message.edit_text(
        new_text,
        reply_markup=await customizable_kb({"üëàüèª –ù–∞–∑–∞–¥": f"subjects:{page}:view"}, "callback")
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
@dp.message_handler(state=SubjectAddState.subject_name)
async def subjects_add_name_handler(message: Message, state: FSMContext):
    subject_name = message.text
    await state.update_data(subject_name=subject_name)
    await SubjectAddState.next()
    teachers_data = await Teacher.all()
    teacher_list = [f"{teacher.teacher_id}. {teacher.name}" for teacher in teachers_data]
    teacher_list = "\n".join(teacher_list)
    await message.answer(
        f"<b>–ù–∞–ø–∏—à–∏ id —É—á–∏—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ –≤–µ–¥—É—Ç –ø—Ä–µ–¥–º–µ—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:</b>\n\n{teacher_list}"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –ø—Ä–µ–¥–º–µ—Ç–∞
@dp.message_handler(state=SubjectAddState.subject_teachers)
async def subjects_add_teachers_handler(message: Message, state: FSMContext):
    teacher_ids = message.text.split(", ")
    teachers_data = []
    for teacher_id in teacher_ids:
        teacher = await Teacher.get_or_none(teacher_id=teacher_id)
        if teacher:
            teachers_data.append(teacher)
    subject_name = (await state.get_data()).get("subject_name")
    await state.finish()
    subject = await Subject.create(name=subject_name)
    for teacher in teachers_data:
        await subject.teachers.add(teacher)
    await message.answer("<b>–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª!</b>")
    await subjects_handler(message, state)
